version: "3.9"

# -----------------------------
# Flask build anchors (unchanged)
# -----------------------------
x-app: &default-app
  build:
    context: "."
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "FLASK_DEBUG=${FLASK_DEBUG:-false}"
      - "NODE_ENV=${NODE_ENV:-production}"
  depends_on:
    postgres:
      condition: "service_started"
      required: false
    redis:
      condition: "service_started"
      required: false
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DOCKER_WEB_VOLUME:-./public:/app/public}"

x-assets: &default-assets
  build:
    context: "."
    target: "assets"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "FLASK_DEBUG=${FLASK_DEBUG:-false}"
      - "NODE_ENV=${NODE_ENV:-production}"
  env_file:
    - ".env"
  profiles: ["assets"]
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "0"
  tty: true
  volumes:
    - ".:/app"

# --------------------------------------------
# Airflow 3.1.0 quick-start common definitions
# --------------------------------------------
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.1.0}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__WEBSERVER__SECRET_KEY: "changeme"
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    airflow-redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy
  restart: unless-stopped

services:
  # ========= Flask app stack =========
  postgres:
    image: "postgres:17.6-bookworm"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: "redis:8.2.1-bookworm"
    volumes:
      - redis:/data
    restart: unless-stopped

  web:
    <<: *default-app
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl -f localhost:8000/up || exit 1}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: ["web"]

  worker:
    <<: *default-app
    command: celery -A "hello.app.celery_app" worker -l "${CELERY_LOG_LEVEL:-info}"
    entrypoint: []
    profiles: ["worker"]

  js:
    <<: *default-assets
    command: "../run yarn:build:js"

  css:
    <<: *default-assets
    command: "../run yarn:build:css"

  # ========= Kafka stack =========
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"   # optional internal
      - "9093:9093"   # host access
    restart: unless-stopped

  # ========= Airflow 3.1.0 stack =========
  airflow-postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    volumes:
      - airflow-db:/var/lib/postgresql/data
    restart: unless-stopped

  airflow-redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor

  airflow-api-server:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"

  airflow-worker:
    <<: *airflow-common
    command: celery worker

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate
        airflow users create \
          --username airflow --password airflow \
          --firstname Air --lastname Flow \
          --role Admin --email airflow@example.com
        echo "Airflow init done."

  # Optional: Flower UI (enable with `--profile flower`)
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    profiles: ["flower"]

volumes:
  postgres: {}
  redis: {}
  airflow-db: {}
